import java.text.SimpleDateFormat

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'com.huawei.agconnect'
    id 'androidx.navigation.safeargs.kotlin'
    id "com.google.gms.google-services"
    id "org.sonarqube" version "3.3"
}

static def getDate(String dateFormat) {
    def df = new SimpleDateFormat(dateFormat)
    Calendar c = Calendar.getInstance()
    TimeZone tz = c.getTimeZone()
    df.setTimeZone(tz)
    return df.format(new Date())
}

static def getShortDate() {
    return getDate("yyMMdd")
}


/**
 */
def versionMajor = 1
def versionMinor = 1
def versionPatch = 16

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))


android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion


    sonarqube {
        properties {
            property "sonar.projectName", "cargill-dfm-app"
            property "sonar.projectKey", "cargill-dfm-app"
            //property "sonar.host.url", "http://localhost:9000"
            property "sonar.language", "kotlin"
            property "sonar.sources", "src/main/"
            property "sonar.login", "admin"
            property "sonar.password", "admin1"
        }
    }
    defaultConfig {
        applicationId "com.ekenya.rnd.baseappcargill"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.compileSdkVersion
        versionCode versionPatch
        resConfigs "en", "US"
        versionName "${versionMajor}.${versionMinor}.${versionPatch}-" + getShortDate()
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }
    aaptOptions {
        cruncherEnabled = false
    }
    signingConfigs {
        //Assume you have storeFile generated already
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            //useProguard false
            shrinkResources false
            resValue "string", "app_version", "v${defaultConfig.versionName}"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //signingConfig signingConfigs.release
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "Cargill DFM.${versionName}.apk"
                }
            }
        }
        release {
            minifyEnabled true
            debuggable false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_version", "v${defaultConfig.versionName}"
            //Referring signingConfigs of release added below
            signingConfig signingConfigs.release
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "Cargill DFM.${versionName}.apk"
                }
            }
        }
    }

    flavorDimensions "version"
    productFlavors {
        prod {
            dimension "version"
            resValue "string", "app_name", "Cargill DFM"
            applicationId "com.ekenya.rnd.baseappcargill"
        }
    }
    lintOptions {
        disable 'ContentDescription'
        checkReleaseBuilds true
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    // Temporary fix until alpha10
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            exclude 'META-INF/proguard/androidx-annotations.pro'
        }

    }
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }

    dynamicFeatures = [':cargillfarmer', ':cargillbuyer', ':authcargill', ':cargillcoop',]
   //dynamicFeatures = []

}

//ext.versionCodes = ['armeabi-v7a': 3, 'arm64-v8a': 4, 'x86': 5, 'x86_64': 6]
dependencies {

//Shared Library
    api project(":common")
    //api project(":printermodule")
    implementation 'androidx.appcompat:appcompat:' + rootProject.appcompat
    implementation 'com.google.android.material:material:' + rootProject.materialVersion
    implementation 'androidx.constraintlayout:constraintlayout:'+rootProject.constraintLayoutVersion
    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    //test
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //Java dagger
    annotationProcessor "com.google.dagger:dagger-android-processor:" + rootProject.googleDaggerVersion
    annotationProcessor "com.google.dagger:dagger-compiler:" + rootProject.googleDaggerVersion
    //Kotlin dagger
    kapt 'com.google.dagger:dagger-compiler:' + rootProject.googleDaggerVersion
    kapt 'com.google.dagger:dagger-android-processor:' + rootProject.googleDaggerVersion

}